//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   
   int expression_type;     // Reg, or integer or label
   int num_of_args, stack_space, max_args;  // Represent the 3 integers after each procedure
   int expression_flag = 0;

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
        String label = (String) n.node.accept(this,argu);
        if(label == null){
          return null;
        }
        System.out.print(label+":");
        return (R) label;
       }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String temp = (String) n.f2.accept(this, argu);
      num_of_args = Integer.parseInt(temp);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      temp = (String) n.f5.accept(this, argu);
      stack_space = Integer.parseInt(temp);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      temp = (String) n.f8.accept(this, argu);
      max_args = Integer.parseInt(temp);
      n.f9.accept(this, argu);
      System.out.println(".text");                              // Starting part of the function
      System.out.println(".globl    main");
      System.out.println("main:");
      int for_stack;
      for_stack = Math.max(0, max_args-4)*4+(1+stack_space)*4;
      System.out.println("move $fp, $sp");
      System.out.println("subu $sp, $sp, "+Integer.toString((for_stack)));   // Frame pointer is not required for MAIN
      System.out.println("sw $ra, -4($fp)");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("lw $ra, -4($fp)");
      System.out.println("addu $sp, $sp, "+Integer.toString(for_stack));
      System.out.println("j $ra");
      System.out.println();               // New line in the end
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);

      System.out.println(".text\n.globl _halloc\n_halloc:\nli $v0, 9\nsyscall\nj $ra\n\n.text\n.globl _print\n_print:\nli $v0, 1\nsyscall\nla $a0, newl\n li $v0, 4\nsyscall\nj $ra\n\n.data\n.align   0\nnewl:    .asciiz \"\\n\"\n.data\n.align   0\nstr_er:  .asciiz \" ERROR: abnormal termination\\n\" \n");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String proc_name = (String) n.f0.accept(this, argu);
      System.out.println(".text");                              // Starting part of the function
      System.out.println(".globl    "+proc_name);
      System.out.println(proc_name+":");
      n.f1.accept(this, argu);
      String temp = (String) n.f2.accept(this, argu);
      num_of_args = Integer.parseInt(temp);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      temp = (String) n.f5.accept(this, argu);
      stack_space = Integer.parseInt(temp);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      temp = (String) n.f8.accept(this, argu);
      max_args = Integer.parseInt(temp);
      n.f9.accept(this, argu);
      int for_stack;
      for_stack = Math.max(0, max_args-4)*4+(2+stack_space)*4;
      System.out.println("sw $fp, -8($sp)");
      System.out.println("move $fp, $sp");
      System.out.println("subu $sp, $sp, "+Integer.toString(for_stack));
      System.out.println("sw $ra, -4($fp)");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("lw $ra, -4($fp)");
      System.out.println("lw $fp, "+Integer.toString(for_stack-8)+"($sp)");
      System.out.println("addu $sp, $sp, "+Integer.toString(for_stack));
      System.out.println("j $ra");
      System.out.println();               // New line in the end
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // Have to print out the error message
      System.out.println("li $v0, 4");
      System.out.println("la $a0, str_er");
      System.out.println("syscall");
      System.out.println("li $v0, 10");
      System.out.println("syscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String) n.f1.accept(this, argu);
      String label = (String) n.f2.accept(this, argu);
      System.out.println("beqz $"+reg+" "+label);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = (String) n.f1.accept(this, argu);
      System.out.println("b "+label);   // b is a branch instruction
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String) n.f1.accept(this, argu);
      String lit = (String) n.f2.accept(this, argu);
      String reg2 = (String) n.f3.accept(this, argu);
      System.out.println("sw $"+reg2+", "+lit+"($"+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String) n.f1.accept(this, argu);
      String reg2 = (String) n.f2.accept(this, argu);
      String lit = (String) n.f3.accept(this, argu);
      System.out.println("lw $"+reg1+", "+lit+"($"+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String) n.f1.accept(this, argu);
      argu = (A) reg;     // Pass the register so that it can be assigned to in Binop
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);

      if(expression_type == 0){       // Register
        System.out.println("move $a0 $"+temp);  // Pass as first argument
      }
      else if(expression_type == 1){  // Integer Literal
        System.out.println("li $a0 "+temp);   // Load the integer
      }
      else{                           // Label -- This case will not be encountered
          ;
      }
      System.out.println("jal _print");     // Call the print sub routine
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String) n.f1.accept(this, argu);
      String spill = (String) n.f2.accept(this, argu);

      System.out.println("lw $"+reg+", "+spill);

      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String spill = (String) n.f1.accept(this, argu);
      String reg = (String) n.f2.accept(this, argu);

      System.out.println("sw $"+reg+", "+spill);

      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lit = (String) n.f1.accept(this, argu);
      String reg = (String) n.f2.accept(this, argu);
      int num = Integer.parseInt(lit);

      System.out.print("sw $"+reg+", ");            // Store in the right SPILLEDARG location
      System.out.print(num*4-4);                    // PASSARG is 1 indexed
      System.out.println("($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String expr = (String) n.f1.accept(this, argu);

      if(expression_type == 0){
          System.out.println("jalr $"+expr);  // jalr - Jump and link register
      }
      else if(expression_type == 1){
        ;                                     // Error
      }
      else if(expression_type == 2){
          System.out.println("jal "+expr);    // If it is directly called with label
      }
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      String expr = (String) n.f0.accept(this, argu);
      String temp = (String) argu;
        if(expression_flag == 2){
        if(expression_type == 0){
            System.out.println("move $"+temp+" $"+expr);
        }
        else if(expression_type == 1){
            System.out.println("li $"+temp+" "+expr);   // Load integer
        }
        else{
            System.out.println("la $"+temp+" "+expr);
        }
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String expr = (String) n.f1.accept(this, argu);
      String reg = (String) argu;

      if(expression_type == 0){
          System.out.println("move $a0 $"+expr);System.out.println("jal _halloc");System.out.println("move $"+reg+" $v0");
      }
      else{
          System.out.println("li $a0 "+expr);System.out.println("jal _halloc");System.out.println("move $"+reg+" $v0");
      }
      expression_flag = 0;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String) n.f0.accept(this, argu);
      String reg = (String) n.f1.accept(this, argu);
      String expr = (String) n.f2.accept(this, argu);
      int expr_type = expression_type;                  // Reg or Integer Literal or Label

      String temp = (String) argu;

      if(expr_type == 0){
        System.out.println(op+" $"+temp+", $"+reg+", $"+expr);    // Register
      }
      else if(expr_type == 1){
        System.out.println(op+" $"+temp+", $"+reg+", "+expr);     // Integer Literal
      }
      expression_flag = 1;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String) n.f0.choice.toString();
      if(temp.equals("LE")){
          return (R) "sle"; 
      }
      else if(temp.equals("NE")){
          return (R) "sne";
      }
      else if(temp.equals("PLUS")){     // or addu
          return (R) "add";
      }
      else if(temp.equals("MINUS")){
          return (R) "sub";
      }
      else if(temp.equals("TIMES")){
          return (R) "mul";
      }
      else if(temp.equals("DIV")){
          return (R) "div";
      }

      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      int offset = Integer.parseInt(temp);

      if((num_of_args > 4)&&(offset < (num_of_args - 4))){      // If it is a spilled argument
          return (R) (Integer.toString((offset*4))+"($fp)");
      }
      if(num_of_args > 4){
          offset = offset - (num_of_args-4);
      }

      if(max_args > 4){                     // This is the allocated space for passing extra arguments
          offset = offset + (max_args-4);   // Look at Compilers Slides for how the stack is arranged
      }

      return (R) (Integer.toString(offset*4)+"($sp)");
      // return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      String temp = (String) n.f0.accept(this, argu);
      expression_type = n.f0.which;
      expression_flag = 2;
      return (R) temp;
      // return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.choice.toString();    // Return the register being used
      // return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();     // Return the integer literal as a string. Parse when it is being used
      // return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();     // Return the label
      // return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {    // Not required to print anything here onwards
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
