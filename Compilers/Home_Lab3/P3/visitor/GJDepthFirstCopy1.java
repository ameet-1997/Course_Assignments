//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirstCopy1<R,A> extends GJDepthFirst<R,A> {

    int variable_counter = 20;  // Represents the variable number to be used now
    int label_counter = 0;      // Represents the label number to be used now
    String function_expressions[]  = new String[10];
    int function_expressions_index = 0;
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   ClassTable get_func_table(String type, String func_name)
   {
        ClassTable table = all_tables.get(type);

        while(table != null)
        {
            if(table.method.containsKey(func_name))
            {
                return table.method.get(func_name);
            }

            table = all_tables.get(table.parent);
        }

        return null;
   }


   public String get_id_type_2(String name, ClassTable table)
   {    
        if((name.equals("int"))||(name.equals("boolean"))||(name.equals("int[]")))
        {
            return name;
        }

        if(all_tables.get(name) != null)        // If it is a class name
        {
            return name;
        }

        if(table.argument_names.contains(name))
        {
            int ind = table.argument_names.indexOf(name);
            return table.arguments.get(ind);
        }

        // while(table.parent != null)
        while(table != null)
        {
            if(table.id.containsKey(name))
            {
                return table.id.get(name);
            }
            table = all_tables.get(table.parent);
        }

        return null;
   }

   public String get_id_type_3(String name, ClassTable table)
   {    
        if((name.equals("int"))||(name.equals("boolean"))||(name.equals("int[]")))
        {
            return name;
        }

        if(all_tables.get(name) != null)        // If it is a class name
        {
            return name;
        }

        if(table.argument_names.contains(name))
        {
            int ind = table.argument_names.indexOf(name);
            // return table.vtable.get(name);
            return table.arguments.get(ind);
        }

        // while(table.parent != null)
        while(table != null)
        {
            if(table.id.containsKey(name))
            { 
                return table.vtable.get(name);
                // return table.id.get(name);
            }
            table = all_tables.get(table.parent);
        }

        return null;
   }

   public String get_temp_number(String return_expr, ClassTable table){

      if((return_expr.equals("true"))||(return_expr.equals("false"))||(return_expr.matches("^-?\\d+$"))){   // If it is a literal
        return return_expr;
      }
      
      String type;

      if(!((return_expr.length() > 4)&&((return_expr.charAt(0)=='T')&&(return_expr.charAt(1)=='E')&&(return_expr.charAt(2)=='M')&&(return_expr.charAt(3)=='P')))){
        type = get_id_type(return_expr, table);   // If the object returned is not TEMP

        int temp_number = 0;
        if(table.argument_names.contains(return_expr)){    // Case1: If it is an argument
          temp_number = table.argument_names.indexOf(return_expr)+1;      // +1 as the first argument will be this pointer
          // System.out.println("MOVE TEMP "+temp_number+" "+expr);
        }
        else if(table.id.containsKey(return_expr)){        // Case2: If it is a local declaration
          temp_number = table.id_list.indexOf(return_expr)+table.local_variable_values;
          // System.out.println("MOVE TEMP "+(table.local_variable_values+temp_number)+" "+expr);
        }
        else{       // Case3: If it is a field in the class or parent class. TEMP 0 represents the first argument (this pointer)
          int offset = get_offset(table, return_expr)+4;   // Gets the offset of the field in the object given the function table and name
          // 4 is being added because the first 4 bytes are for function table pointer

          System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP 0 "+offset);variable_counter++; // Stores the address of the identifier
          System.out.println("HLOAD TEMP "+variable_counter+" TEMP "+(variable_counter-1)+" 0");variable_counter++;// Load pointer to obj
          temp_number = variable_counter-1;
        }

        return "TEMP "+temp_number;

      }
      else{
        return return_expr;
      }      
   }

   public void put_in_vtable(ClassTable table, String id_name, String vtable_assign){

      // table = all_tables.get(table.parent);     // The table now belongs to the object it is defined in

    if(table.argument_names.contains(id_name)){     // For arguments
      table.vtable.put(id_name, vtable_assign);
    }

      if(table.id.containsKey(id_name)){            // For local variables
        table.vtable.put(id_name, vtable_assign);
        // return table.id_list.indexOf(id_name)*4;
      }

      // offset += table.id.size()*4;
      while(table.parent != null){
          table = all_tables.get(table.parent);

          if(table.id.containsKey(id_name)){
            table.vtable.put(id_name, vtable_assign);
            // offset += table.id_list.indexOf(id_name)*4;
            // return offset;
          }

          // offset += table.method.size()*4;
      }

      // return offset;   
   }

   public int get_offset(ClassTable table, String id_name){      // Gets the offset of the field by recursively checking parent classes

      int offset = 0;
      // The table passed will now be a function table
      table = all_tables.get(table.parent);     // The table now belongs to the object it is defined in

      if(table.id.containsKey(id_name)){
        return table.id_list.indexOf(id_name)*4;
      }

      offset += table.id.size()*4;
      while(table.parent != null){
          table = all_tables.get(table.parent);

          if(table.id.containsKey(id_name)){
            offset += table.id_list.indexOf(id_name)*4;
            return offset;
          }

          offset += table.method.size()*4;
      }

      return offset;
   }

   public int get_function_offset(String type, String func_name){
      ClassTable table = all_tables.get(type);
      int offset = 0;

      if(table.method.containsKey(func_name)){
        return table.method_list.indexOf(func_name)*4;
      }

      offset += table.method.size()*4;
      while(table.parent != null){
          table = all_tables.get(table.parent);

          if(table.method.containsKey(func_name)){
            offset += table.method_list.indexOf(func_name)*4;
            return offset;
          }

          offset += table.method.size()*4;    
      }

      return offset;
   }

   public int get_total_size(String id_name){     // Gets the total size of the object to be allocated. Considers all the 
                                                  // parent classes as well
      int total_size = 0;
      ClassTable table = all_tables.get(id_name);

      total_size += table.id.size();
      String new_name = table.parent;
      while(new_name != null){
        table = all_tables.get(new_name);
        total_size += table.id.size();
        new_name = table.parent;
      }

      return total_size;
   }

   public int get_total_size_functions(String id_name){
    int total_size = 0;
    ClassTable table = all_tables.get(id_name);

    total_size += table.method.size();
    // String new_name = table.parent;

    while(table.parent != null){
      table = all_tables.get(table.parent);
      total_size += table.method.size();
    }

    return total_size;
   }

   public void print_methods(ClassTable table, int fun){
      int add_offset = 0;

      for(int i=0;i < table.method_list.size();++i){
          System.out.println("MOVE TEMP "+variable_counter+" "+table.current_name+"_"+table.method_list.get(i));
          variable_counter++;
          System.out.println("HSTORE TEMP "+fun+" "+(i*4+add_offset)+" TEMP "+(variable_counter-1));
      }

      add_offset += table.method_list.size()*4;

      while(table.parent != null){
        table = all_tables.get(table.parent);

        for(int i=0;i < table.method_list.size();++i){
            System.out.println("MOVE TEMP "+variable_counter+" "+table.current_name+"_"+table.method_list.get(i));
            variable_counter++;
            System.out.println("HSTORE TEMP "+fun+" "+(i*4+add_offset)+" TEMP "+(variable_counter-1));
        }
        add_offset += table.method_list.size()*4;
      }
   }


   public String get_id_type(String name, ClassTable table)
   {    
        if((name.equals("int"))||(name.equals("boolean"))||(name.equals("int[]")))
        {
            return name;
        }

        if(all_tables.get(name) != null)        // If it is a class name
        {
            return name;
        }

        if(table.argument_names.contains(name))
        {
            int ind = table.argument_names.indexOf(name);
            return table.arguments.get(ind);
        }

        // while(table.parent != null)
        while(table != null)
        {
            if(table.id.containsKey(name))
            {
                return table.id.get(name);
            }
            table = all_tables.get(table.parent);
        }

        return null;
   }

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      System.out.println("MAIN");   // MAIN class

      n.f0.accept(this, argu);
      String class_name = (String) n.f1.accept(this, argu);

      ClassTable table = all_tables.get(class_name);
      table = table.method.get("main");
      argu = (A) table;      

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);

      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String class_name = (String) n.f1.accept(this, argu);

      ClassTable table = all_tables.get(class_name);
      argu = (A) table;

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String class_name = (String) n.f1.accept(this, argu);

      ClassTable table = all_tables.get(class_name);
      argu = (A) table;

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;

      ClassTable table = (ClassTable) argu;

      System.out.println();     // Newline

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String func_name = (String) n.f2.accept(this, argu);

      ClassTable func_table = table.method.get(func_name);    // Get the method from the symbol table
      argu = (A) func_table;

      func_table.local_variable_values = variable_counter;    // Stores the variable_counter value before allocation of local variables
      variable_counter += func_table.id.size();               // Allocating the local variables

      System.out.println(table.current_name+"_"+func_name+" [ "+(func_table.arguments.size()+1)+" ]");    // Prints the starting of the procedure
      System.out.println("BEGIN");

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String return_expr = (String) n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      String to_print = get_temp_number(return_expr, func_table);

      System.out.println("RETURN");
      // System.out.println(return_expr);

      // String to_print = get_temp_number(return_expr, func_table);
      System.out.println(to_print);

      System.out.println("END");
      System.out.println();     // Newline

      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;

      // System.out.println("In AssignmentStatement");

      ClassTable table = (ClassTable) argu;   // Represents the table of the function
      // Need to extract the "TEMP" value of Identifier
      // Cases are, arguments, Local Declarations in functions, Fields
      String id_name = (String) n.f0.accept(this, argu);

      n.f1.accept(this, argu);
      String expr = (String) n.f2.accept(this, argu);
      expr = get_temp_number(expr, table);

      n.f3.accept(this, argu);

      if(table.argument_names.contains(id_name)){    // Case1: If it is an argument
        int temp_number = table.argument_names.indexOf(id_name)+1;             // +1 as the first argument will be "this" pointer
        System.out.println("MOVE TEMP "+temp_number+" "+expr);
          
        if(table.vtable_assign != null){
          // table.vtable.put(id_name, table.vtable_assign);
          String temp_assign = table.vtable_assign;
          table.vtable_assign = null;
          put_in_vtable(table, id_name, temp_assign);
          // System.out.println("In AssignmentStatement with correct vtable assign");
        }
      }
      else if(table.id.containsKey(id_name)){        // Case2: If it is a local declaration
        int temp_number = table.id_list.indexOf(id_name);
        System.out.println("MOVE TEMP "+(table.local_variable_values+temp_number)+" "+expr);

        if(table.vtable_assign != null){
          // table.vtable.put(id_name, table.vtable_assign);
          String temp_assign = table.vtable_assign;
          table.vtable_assign = null;
          put_in_vtable(table, id_name, temp_assign);
          // System.out.println("In AssignmentStatement with correct vtable assign");
        }
      }
      else{       // Case3: If it is a field in the class or parent class. TEMP 0 represents the first argument (this pointer)
        int offset = get_offset(table, id_name);   // Gets the offset of the field in the object given the function table and name       
        /***********
        Check here for offset function
        ***********/
        if(table.vtable_assign != null){
          String temp_assign = table.vtable_assign;
          table.vtable_assign = null;
          put_in_vtable(table, id_name, temp_assign);
          // table.vtable.put(id_name, table.vtable_assign);
        }
        System.out.println("HSTORE TEMP 0 "+(offset+4)+" "+expr);   // First field points to function table
      }

      // table.vtable_assign = null;

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {     // Still to be done
      R _ret=null;
      ClassTable table = (ClassTable) argu;
      String id_name = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String index = (String) n.f2.accept(this, argu);
      index = get_temp_number(index, table);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String value = (String) n.f5.accept(this, argu);
      value = get_temp_number(value, table);

      // System.out.println("Recieved String");
      // System.out.println(value);
      n.f6.accept(this, argu);

      if(table.argument_names.contains(id_name)){    // Case1: If it is an argument
        int temp_number = table.argument_names.indexOf(id_name)+1;             // +1 as the first argument will be this pointer
        System.out.println("MOVE TEMP "+variable_counter+" TIMES "+index+" 4");variable_counter++;  // Size of integer is 4
        System.out.println("MOVE TEMP "+variable_counter+"PLUS TEMP "+temp_number+" TEMP "+(variable_counter-1));variable_counter++;

        System.out.println("HSTORE TEMP "+(variable_counter-1)+" 0 "+value);
        // System.out.println("MOVE TEMP "+temp_number+" "+expr);
      }
      else if(table.id.containsKey(id_name)){        // Case2: If it is a local declaration
        int temp_number = table.id_list.indexOf(id_name);
        System.out.println("MOVE TEMP "+variable_counter+" TIMES "+index+" 4");variable_counter++;
        System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP "+(temp_number+table.local_variable_values)+" TEMP "+(variable_counter-1)); variable_counter++;

        System.out.println("HSTORE TEMP "+(variable_counter-1)+" 0 "+value);
        // System.out.println("MOVE TEMP "+(table.local_variable_values+temp_number)+" "+expr);
      }
      else{       // Case3: If it is a field in the class or parent class. TEMP 0 represents the first argument (this pointer)
        int offset = get_offset(table, id_name)+4;   // Gets the offset of the field in the object given the function table and name
        // TEMP 0 represents the object
        // System.out.println("MOVE TEMP "+variable_counter+" TIMES "+index+" 4");variable_counter++;

        System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP 0 "+offset);variable_counter++; // Location where pointer is stored
        System.out.println("HLOAD TEMP "+variable_counter+" TEMP "+(variable_counter-1)+" 0");variable_counter++;// Get base address of the array
        System.out.println("MOVE TEMP "+variable_counter+" TIMES "+index+" 4");variable_counter++;    // Offset in array
        // System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP 0 "+offset);variable_counter++;
        System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP "+(variable_counter-1)+" TEMP "+(variable_counter-2));variable_counter++;
        // System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP 0 TEMP "+offset);variable_counter++;
        System.out.println("HSTORE TEMP "+(variable_counter-1)+" 0 "+value);

        // System.out.println("HSTORE TEMP 0 "+offset+" "+expr);
      }

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cond = (String) n.f2.accept(this, argu);
      cond = get_temp_number(cond, table);

      n.f3.accept(this, argu);
      int l = label_counter;      // Store the current label number
      System.out.println("CJUMP "+cond+" L"+l);
      label_counter++;            // Increment the label number
      n.f4.accept(this, argu);
      System.out.println("L"+l+" NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cond = (String) n.f2.accept(this, argu);
      cond = get_temp_number(cond, table);
      n.f3.accept(this, argu);

      int l1 = label_counter;
      System.out.println("CJUMP "+cond+" L"+l1);
      label_counter++;
      n.f4.accept(this, argu);

      int l2 = label_counter;
      label_counter++;
      System.out.println("JUMP L"+l2);
      System.out.println("L"+l1+" NOOP");

      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println("L"+l2+" NOOP");

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;
      int l1 = label_counter;
      label_counter++;
      int l2 = label_counter;
      label_counter++;

      System.out.println("L"+l1+" NOOP");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cond = (String) n.f2.accept(this, argu);
      cond = get_temp_number(cond, table);

      System.out.println("CJUMP "+cond+" L"+l2);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      System.out.println("JUMP L"+l1);
      System.out.println("L"+l2+" NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;

      ClassTable table = (ClassTable) argu;
      // System.out.println("In Print Statement");
      // System.out.println(table.parent);
      // System.out .println("End of Print Statement");

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String temp = (String) n.f2.accept(this, argu);     // The Expression returns a temp representing the answer
      temp = get_temp_number(temp, table);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      System.out.println("PRINT "+temp);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String temp = (String) n.f0.accept(this, argu);
      return (R) temp;
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String temp1 = (String) n.f0.accept(this, argu);
      temp1 = get_temp_number(temp1, table);
      n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      temp2 = get_temp_number(temp2, table);

      System.out.println("MOVE TEMP "+variable_counter+" TIMES "+temp1+" "+temp2);
      variable_counter++;
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String temp1 = (String) n.f0.accept(this, argu);
      temp1 = get_temp_number(temp1, table);
      n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      temp2 = get_temp_number(temp2, table);

      // Will have to use De-Morgan's laws

      System.out.println("MOVE TEMP "+variable_counter+" MINUS 1 "+temp1);
      variable_counter++;
      System.out.println("MOVE TEMP "+variable_counter+" MINUS 1 "+temp2);
      variable_counter++;
      System.out.println("MOVE TEMP "+variable_counter+" TIMES TEMP "+(variable_counter-2)+" TEMP "+(variable_counter-1));
      variable_counter++;
      System.out.println("MOVE TEMP "+variable_counter+" MINUS 1 TEMP "+(variable_counter-1));
      variable_counter++;
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String temp1 = (String) n.f0.accept(this, argu);
      temp1 = get_temp_number(temp1, table);
      n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      temp2 = get_temp_number(temp2, table);
      System.out.println("MOVE TEMP "+variable_counter+" LE "+temp1+" "+temp2);
      variable_counter++;
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String temp1 = (String) n.f0.accept(this, argu);
      temp1 = get_temp_number(temp1, table);
      n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      temp2 = get_temp_number(temp2, table);
      System.out.println("MOVE TEMP "+variable_counter+" NE "+temp1+" "+temp2);
      variable_counter++;
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String temp1 = (String) n.f0.accept(this, argu);
      temp1 = get_temp_number(temp1, table);
      n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      temp2 = get_temp_number(temp2, table);
      System.out.println("MOVE TEMP "+variable_counter+" PLUS "+temp1+" "+temp2);
      variable_counter++;
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String temp1 = (String) n.f0.accept(this, argu);
      temp1 = get_temp_number(temp1, table);
      n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      temp2 = get_temp_number(temp2, table);
      System.out.println("MOVE TEMP "+variable_counter+" MINUS "+temp1+" "+temp2);
      variable_counter++;
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String temp1 = (String) n.f0.accept(this, argu);
      temp1 = get_temp_number(temp1, table);
      n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      temp2 = get_temp_number(temp2, table);
      System.out.println("MOVE TEMP "+variable_counter+" TIMES "+temp1+" "+temp2);
      variable_counter++;
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String temp1 = (String) n.f0.accept(this, argu);
      temp1 = get_temp_number(temp1, table);
      n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      temp2 = get_temp_number(temp2, table);
      System.out.println("MOVE TEMP "+variable_counter+" DIV "+temp1+" "+temp2);
      variable_counter++;
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String array_name = (String) n.f0.accept(this, argu);
      array_name = get_temp_number(array_name, table);

      n.f1.accept(this, argu);
      String lookup = (String) n.f2.accept(this, argu);
      lookup = get_temp_number(lookup, table);

      // System.out.println("HLOAD TEMP "+variable_counter+" "+array_name);variable_counter++;   
      System.out.println("MOVE TEMP "+variable_counter+" TIMES 4 "+lookup);variable_counter++;   
      System.out.println("MOVE TEMP "+variable_counter+" PLUS "+array_name+" TEMP "+(variable_counter-1));variable_counter++;  // Get the address
      System.out.println("HLOAD TEMP "+variable_counter+" TEMP "+(variable_counter-1)+" 0");variable_counter++;// Value at address

      n.f3.accept(this, argu);

      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      String temp = (String) n.f0.accept(this, argu);
      temp = get_temp_number(temp, table);

      System.out.println("MOVE TEMP "+variable_counter+" MINUS "+temp+" 4");variable_counter++;
      System.out.println("HLOAD TEMP "+variable_counter+" TEMP "+(variable_counter-1)+" 0");variable_counter++;

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      // System.out.println("In MessageSend");
      String obj = (String) n.f0.accept(this, argu);    // Will either be an identifier or TEMP (new Identifier)
      String type;
      String final_obj;
      String table_message_send_type;
      table_message_send_type = table.message_send_type;

      table.vtable_assign = null;           // Will not be null here only if Primary expression was new identifier()

      /******Remove this
      *****************/
      // System.out.println("The object in MessageSend is : "+obj);  // Prints the object which calls the function

      // Still have to handle This.MessageSend()
      // PrimaryExpression could be a message send itself (Something that returns a value)

      if(!((obj.length() > 4)&&((obj.charAt(0)=='T')&&(obj.charAt(1)=='E')&&(obj.charAt(2)=='M')&&(obj.charAt(3)=='P')))){
        type = get_id_type(obj, table);   // If the object returned is not TEMP

        // System.out.println("In MessageSend "+type);

        int temp_number = 0;
        if(table.argument_names.contains(obj)){    // Case1: If it is an argument
          temp_number = table.argument_names.indexOf(obj)+1;      // +1 as the first argument will be this pointer
          // System.out.println("MOVE TEMP "+temp_number+" "+expr);
        }
        else if(table.id.containsKey(obj)){        // Case2: If it is a local declaration
          temp_number = table.id_list.indexOf(obj)+table.local_variable_values;
          // System.out.println("MOVE TEMP "+(table.local_variable_values+temp_number)+" "+expr);
        }
        else{       // Case3: If it is a field in the class or parent class. TEMP 0 represents the first argument (this pointer)
          int offset = get_offset(table, obj)+4;   // Gets the offset of the field in the object given the function table and name
          System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP 0 "+offset);variable_counter++; // Stores the address of the identifier
          System.out.println("HLOAD TEMP "+variable_counter+" TEMP "+(variable_counter-1)+" 0");variable_counter++;// Load pointer to obj
          temp_number = variable_counter-1;
        }

        final_obj = "TEMP "+temp_number;

      }
      else{
        type = table.message_send_type;     // Extra field in the class
        // System.out.println("MessageSend type is: "+type);
        final_obj = obj;                    // If TEMP has already been returned, then just pass the same value
      }

      /**********REmove this
      ***/
      // System.out.println(type);


      n.f1.accept(this, argu);
      String func_name = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      int func_offset = get_function_offset(type, func_name);  // Get the offset at which the function is located

      // System.out.println("HLOAD TEMP "+variable_counter+" "+final_obj+" 0");

      /****************
      Load the correct function after getting the function offset and call it
      ****************/

      System.out.println("HLOAD TEMP "+variable_counter+" "+final_obj+" 0");variable_counter++;   // Load the function table
      System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP "+(variable_counter-1)+" "+func_offset);variable_counter++;
      System.out.println("HLOAD TEMP "+variable_counter+" TEMP "+(variable_counter-1)+" 0");variable_counter++;// Load the function

      // System.out.println("CALL TEMP "+(variable_counter-1));    // Call to the function
      int function_load = variable_counter-1;


      // ClassTable belonging_class = all_tables.get(type);
      // ClassTable func_table = belonging_class.method.get(func_name);
      // argu = (A) func_table;
      
      // table.message_send_arguments = new String("( "+final_obj);   // Open Braces and first argument is a this pointer

      // function_expressions.add("( "+final_obj);
      function_expressions[function_expressions_index] = ("( "+final_obj);
      function_expressions_index++;

      table.message_send_arguments = ("( "+final_obj);
      String expr = (String) n.f4.accept(this, argu);     // Will contain concatenated argument names

      // String fei = function_expressions.get(function_expressions_index-1);
      // fei = fei + " )";

      function_expressions[function_expressions_index-1] = function_expressions[function_expressions_index-1] + " )";
      table.message_send_arguments = table.message_send_arguments + " )";


      System.out.println("MOVE TEMP "+variable_counter+" CALL TEMP "+function_load);variable_counter++;
      int return_exp = variable_counter-1;

      // System.out.println(table.message_send_arguments);    // Print the arguments of the function
      System.out.println(function_expressions[function_expressions_index-1]);


      n.f5.accept(this, argu);
      // function_expressions.remove(function_expressions_index-1);   // Pop the last element from the linked list
      function_expressions_index--;

      // table.message_send_type = null;   // Set this to something------------------------------
      String type_ = get_id_type_2(obj, table);
      if(type_ != null){
        ClassTable func_table = get_func_table(type_, func_name);
        table.message_send_type = func_table.return_type;
      }
      else{
        ClassTable func_table = get_func_table(table_message_send_type, func_name);
        // System.out.println(table.message_send_type);
        table.message_send_type = func_table.return_type;
      }

      return (R) ("TEMP " + Integer.toString(return_exp));
      // return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;
      String expr = (String) n.f0.accept(this, argu);
      table.vtable_assign = null;
      expr = get_temp_number(expr, table);

      table.message_send_arguments = table.message_send_arguments + " "+expr+" ";
      function_expressions[function_expressions_index-1] = function_expressions[function_expressions_index-1] + " "+expr+" ";      
      n.f1.accept(this, argu);

      // table.message_send_arguments = table.message_send_arguments + " "+expr+" ";
      // function_expressions[function_expressions_index-1] = function_expressions[function_expressions_index-1] + " "+expr+" ";
      // String fei = function_expressions.get(function_expressions_index-1);
      // fei = fei + " "+expr+" ";
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;
      n.f0.accept(this, argu);
      String expr = (String) n.f1.accept(this, argu);
      table.vtable_assign = null;
      expr = get_temp_number(expr, table);

      table.message_send_arguments = table.message_send_arguments + " "+expr+" ";
      function_expressions[function_expressions_index-1] = function_expressions[function_expressions_index-1] + " "+expr+" ";
      // String fei = function_expressions.get(function_expressions_index-1);
      // fei = fei + " "+expr+" ";

      
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String temp = (String) n.f0.accept(this, argu);

      // For Integer or Boolean Literals
      return (R) temp;
      // return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
      // return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "1";    // 1 represents True
      // return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "0";    // 0 represents False
      // return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
      // return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      ClassTable table = (ClassTable) argu;
      table.message_send_type = table.parent;
      return (R) "TEMP 0";
      // return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String temp = (String) n.f3.accept(this, argu);
      temp = get_temp_number(temp, table);

      n.f4.accept(this, argu);
      System.out.println("MOVE TEMP "+variable_counter+" TIMES "+temp+" 4");variable_counter++;
      System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP "+(variable_counter-1)+" 4");variable_counter++;  // Extra Space for storing length
      int check_against = variable_counter-1;

      System.out.println("MOVE TEMP "+variable_counter+" HALLOCATE TEMP "+(variable_counter-1));variable_counter++;
      int base_address = variable_counter-1;  // Base address of the array

      System.out.println("MOVE TEMP "+variable_counter+" 4");variable_counter++;
      int check_with = variable_counter-1;

      System.out.println("L"+label_counter+" NOOP");label_counter++;
      System.out.println("CJUMP LE TEMP "+check_with+" TEMP "+check_against+" L"+label_counter);label_counter++;
      System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP "+base_address+" TEMP "+check_with);variable_counter++;
      System.out.println("HSTORE TEMP "+(variable_counter-1)+" 0 0");     // Initialize it to 0
      System.out.println("MOVE TEMP "+check_with+" PLUS TEMP "+check_with+" 4");

      // System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP "+field+" TEMP "+check_with);variable_counter++;
      // System.out.println("HSTORE TEMP "+(variable_counter-1) + " 0 0");    // Initialize that offset to 0
      // System.out.println("MOVE TEMP "+check_with + " PLUS TEMP "+check_with+" 4");
      System.out.println("JUMP L"+(label_counter-2));
      System.out.println("L"+(label_counter-1) + " NOOP");

      System.out.println("HSTORE TEMP "+base_address+" 0 "+temp);
      System.out.println("MOVE TEMP "+base_address+" PLUS TEMP "+base_address+" 4");

      return (R) ("TEMP "+Integer.toString(base_address));
      // return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String class_name = (String) n.f1.accept(this, argu);
      ClassTable table = (ClassTable) all_tables.get(class_name);
      ClassTable func_table = (ClassTable) argu;
      func_table.vtable_assign = class_name;   // For dynamic function matching
      // System.out.println("In newIdentifier with class: "+class_name);

      func_table.message_send_type = class_name;    // Auxillary information for MessageSend

      System.out.println(); // New line

      int fun = variable_counter, field = variable_counter+1;

      /***
      Allocate the right size
      ***/
      int size_of_variables = get_total_size(table.current_name);   // Return the total size of the variables
      int size_of_functions = get_total_size_functions(table.current_name);

      System.out.println("MOVE TEMP "+fun+" HALLOCATE "+(4*size_of_functions));  // Allocate for functions
      System.out.println("MOVE TEMP "+field+" HALLOCATE "+(4*size_of_variables+4));  // Allocate for fields
      variable_counter++;
      variable_counter++;

      print_methods(table, fun);      // Prints all the methods required

      System.out.println("HSTORE TEMP "+field+" 0 TEMP "+fun);      // Make field table point to function table
      // Declarations for function done

      // Declarations for fields
      int check_against = variable_counter;
      variable_counter++;

      // int size_of_variables = get_total_size(table.current_name);   // Returns the total size 
      System.out.println("MOVE TEMP "+check_against+" "+(4*size_of_variables+4-1));
      int check_with = variable_counter;
      System.out.println("MOVE TEMP "+variable_counter+" 4");
      variable_counter++;
      
      System.out.println("L"+label_counter+" NOOP");label_counter++;
      System.out.println("CJUMP LE TEMP "+check_with+" TEMP "+check_against+" L"+label_counter);label_counter++;
      System.out.println("MOVE TEMP "+variable_counter+" PLUS TEMP "+field+" TEMP "+check_with);variable_counter++;
      System.out.println("HSTORE TEMP "+(variable_counter-1) + " 0 0");    // Initialize that offset to 0
      System.out.println("MOVE TEMP "+check_with + " PLUS TEMP "+check_with+" 4");
      System.out.println("JUMP L"+(label_counter-2));
      System.out.println("L"+(label_counter-1) + " NOOP");
     

      System.out.println(); // New line


      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R) ("TEMP " + Integer.toString(field));

      // return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      ClassTable table = (ClassTable) argu;
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      temp = get_temp_number(temp, table);
      System.out.println("MOVE TEMP "+variable_counter+" MINUS 1 "+temp);   // 1 - Expression will give the right boolean
      variable_counter++;
      return (R) ("TEMP " + Integer.toString(variable_counter-1));
      // return (R) Integer.toString(variable_counter-1);
      // return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);   // Return the same thing
      n.f2.accept(this, argu);
      return (R) temp;
      // return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
 
